// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: car/car.proto

package car

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarClient is the client API for Car service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarClient interface {
	// 分页获取汽车列表
	ListCar(ctx context.Context, in *ListCarReq, opts ...grpc.CallOption) (*ListCarReply, error)
	// 获取汽车详情
	GetCar(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*CarReply, error)
	// 保存汽车
	SaveCar(ctx context.Context, in *SaveCarReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 交易汽车
	TradeCar(ctx context.Context, in *TradeCarReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 删除汽车
	DeleteCar(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*empty.Empty, error)
}

type carClient struct {
	cc grpc.ClientConnInterface
}

func NewCarClient(cc grpc.ClientConnInterface) CarClient {
	return &carClient{cc}
}

func (c *carClient) ListCar(ctx context.Context, in *ListCarReq, opts ...grpc.CallOption) (*ListCarReply, error) {
	out := new(ListCarReply)
	err := c.cc.Invoke(ctx, "/api.car.v1.Car/ListCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) GetCar(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*CarReply, error) {
	out := new(CarReply)
	err := c.cc.Invoke(ctx, "/api.car.v1.Car/GetCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) SaveCar(ctx context.Context, in *SaveCarReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.car.v1.Car/SaveCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) TradeCar(ctx context.Context, in *TradeCarReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.car.v1.Car/TradeCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClient) DeleteCar(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.car.v1.Car/DeleteCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServer is the server API for Car service.
// All implementations must embed UnimplementedCarServer
// for forward compatibility
type CarServer interface {
	// 分页获取汽车列表
	ListCar(context.Context, *ListCarReq) (*ListCarReply, error)
	// 获取汽车详情
	GetCar(context.Context, *wrappers.Int64Value) (*CarReply, error)
	// 保存汽车
	SaveCar(context.Context, *SaveCarReq) (*empty.Empty, error)
	// 交易汽车
	TradeCar(context.Context, *TradeCarReq) (*empty.Empty, error)
	// 删除汽车
	DeleteCar(context.Context, *wrappers.Int64Value) (*empty.Empty, error)
	mustEmbedUnimplementedCarServer()
}

// UnimplementedCarServer must be embedded to have forward compatible implementations.
type UnimplementedCarServer struct {
}

func (UnimplementedCarServer) ListCar(context.Context, *ListCarReq) (*ListCarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCar not implemented")
}
func (UnimplementedCarServer) GetCar(context.Context, *wrappers.Int64Value) (*CarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedCarServer) SaveCar(context.Context, *SaveCarReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCar not implemented")
}
func (UnimplementedCarServer) TradeCar(context.Context, *TradeCarReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeCar not implemented")
}
func (UnimplementedCarServer) DeleteCar(context.Context, *wrappers.Int64Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarServer) mustEmbedUnimplementedCarServer() {}

// UnsafeCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServer will
// result in compilation errors.
type UnsafeCarServer interface {
	mustEmbedUnimplementedCarServer()
}

func RegisterCarServer(s grpc.ServiceRegistrar, srv CarServer) {
	s.RegisterService(&Car_ServiceDesc, srv)
}

func _Car_ListCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).ListCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.car.v1.Car/ListCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).ListCar(ctx, req.(*ListCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.car.v1.Car/GetCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).GetCar(ctx, req.(*wrappers.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_SaveCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).SaveCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.car.v1.Car/SaveCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).SaveCar(ctx, req.(*SaveCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_TradeCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).TradeCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.car.v1.Car/TradeCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).TradeCar(ctx, req.(*TradeCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Car_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.car.v1.Car/DeleteCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServer).DeleteCar(ctx, req.(*wrappers.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

// Car_ServiceDesc is the grpc.ServiceDesc for Car service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Car_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.car.v1.Car",
	HandlerType: (*CarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCar",
			Handler:    _Car_ListCar_Handler,
		},
		{
			MethodName: "GetCar",
			Handler:    _Car_GetCar_Handler,
		},
		{
			MethodName: "SaveCar",
			Handler:    _Car_SaveCar_Handler,
		},
		{
			MethodName: "TradeCar",
			Handler:    _Car_TradeCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _Car_DeleteCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "car/car.proto",
}
